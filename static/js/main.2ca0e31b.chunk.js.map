{"version":3,"sources":["comps/funcNote.tsx","comps/form.tsx","comps/todo.tsx","comps/note.tsx","comps/todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ITodo","todoId","title","completed","INotes","id","noteName","todos","dateCreated","Date","lastUpdated","openList","myNotes","axios","get","then","response","console","log","notes","data","catch","error","delete","note","post","patch","this","currentNotesCount","maxNotes","newNote","length","push","addNoteToServer","findIndex","todoName","newTodo","updateNoteToServer","idNote","idTodo","replace","filter","deleteNoteToServer","observable","Form","observer","props","state","getInitialData","handleChange","bind","handleSubmit","event","setState","target","value","preventDefault","addNote","className","onSubmit","type","placeholder","onChange","React","Component","Todo","todo","color","onClick","changeComp","Notes","checked","addTodo","markComplete","OpenList","Openlist","e","deleteNote","map","key","Todolist","findNote","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.2ca0e31b.chunk.js","sourcesContent":["import { observable, IObservableArray } from 'mobx';\r\nimport axios from 'axios';\r\n\r\nexport class ITodo {\r\n    todoId: number = 0;\r\n    title: string = '';\r\n    completed: boolean = false;\r\n}\r\n\r\nexport class INotes {\r\n    id: number = 0;\r\n    noteName: string = '';\r\n    todos: ITodo[] = [];\r\n    dateCreated: Date = new Date();\r\n    lastUpdated: Date = new Date();\r\n    openList: boolean = false;\r\n}\r\n\r\nclass funcNotes {\r\n    @observable notes: IObservableArray<INotes> = observable([]);\r\n    @observable maxNotes: number = 10;\r\n    @observable currentNotesCount = 0;\r\n\r\n    public async getInitialData() {\r\n        await axios.get('https://my-json-server.typicode.com/dorhaba/NoteJson/note/')\r\n            .then(response => {\r\n                console.log(response)\r\n                myNotes.notes = response.data;\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n            });\r\n    }\r\n\r\n    public async deleteNoteToServer(id: number) {\r\n        await axios.delete('https://my-json-server.typicode.com/dorhaba/NoteJson/note/' + id)\r\n            .then(response => {\r\n                console.log(response)\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n            });\r\n    }\r\n\r\n    public async addNoteToServer(note: INotes) {\r\n        await axios.post('https://my-json-server.typicode.com/dorhaba/NoteJson/note/', note)\r\n            .then(response => {\r\n                console.log(response);\r\n                // this.getInitialData();\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n            });;\r\n\r\n    }\r\n\r\n    public async updateNoteToServer(note: INotes) {\r\n        await axios.patch('https://my-json-server.typicode.com/dorhaba/NoteJson/note/' + note.id, note)\r\n            .then(response => {\r\n                console.log(response);\r\n\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n            });\r\n    }\r\n\r\n    public addNote(noteName: string) {\r\n        if (this.currentNotesCount < this.maxNotes) {\r\n            const newNote = new INotes();\r\n            console.log(noteName + \"cdccd\");\r\n            if (myNotes.notes.length === 0) {\r\n                newNote.id = 0;\r\n            }\r\n            else {\r\n                newNote.id = myNotes.notes[myNotes.notes.length - 1].id + 1;\r\n            }\r\n            newNote.noteName = noteName;\r\n            this.notes.push(newNote);\r\n            this.currentNotesCount = this.currentNotesCount + 1;\r\n            this.addNoteToServer(newNote);\r\n\r\n        }\r\n    }\r\n\r\n    public findNote(id: number) {\r\n        return this.notes.findIndex(note => note.id === id);\r\n    }\r\n\r\n    public addTodo(id: number, todoName: string) {\r\n        const newTodo = new ITodo();\r\n        newTodo.todoId = myNotes.notes[id].todos.length;\r\n        newTodo.title = todoName;\r\n        this.notes[id].todos.push(newTodo);\r\n        this.updateNoteToServer(myNotes.notes[id]);\r\n    }\r\n\r\n\r\n    public markComplete(idNote: number, idTodo: number) {\r\n        myNotes.notes[idNote].todos[idTodo].completed = !myNotes.notes[idNote].todos[idTodo].completed;\r\n        this.updateNoteToServer(myNotes.notes[idNote]);\r\n    }\r\n\r\n    public OpenList(idNote: number) {\r\n        myNotes.notes[idNote].openList = !myNotes.notes[idNote].openList;\r\n        this.updateNoteToServer(myNotes.notes[idNote]);\r\n    }\r\n\r\n    public deleteNote(id: number) {\r\n        this.notes.replace([...this.notes.filter(note => note.id !== id)]);\r\n        this.currentNotesCount = this.currentNotesCount - 1;\r\n        this.deleteNoteToServer(id);\r\n    }\r\n\r\n}\r\nconst myNotes = new funcNotes();\r\nexport default myNotes;","import React from 'react';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport myNotes from './funcNote';\r\nimport { observer } from \"mobx-react\";\r\ninterface Iprops {\r\n\r\n}\r\n\r\ninterface Istate {\r\n    noteName: string;\r\n\r\n}\r\n@observer\r\nclass Form extends React.Component<Iprops, Istate> {\r\n    constructor(props: Readonly<Iprops>) {\r\n        super(props);\r\n        this.state = {\r\n            noteName: \"\"\r\n\r\n        }\r\n        myNotes.getInitialData();\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(event: any) {\r\n        this.setState({\r\n            noteName: event.target.value\r\n        });\r\n    }\r\n\r\n    handleSubmit(event: any) {\r\n        event.preventDefault();\r\n        myNotes.addNote(this.state.noteName);\r\n        this.setState({ noteName: \"\" })\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"container-sm p-4 my-4  bg-dark text-white\" >\r\n                <h2>Todo - List\r\n\r\n                </h2>\r\n                < form className=\"form-group\" onSubmit={this.handleSubmit} >\r\n                    <div className=\"row\" >\r\n                        <div className=\"col\" >\r\n                            <input type='text' placeholder=\"Name Task\" className=\"form-control\"\r\n                                value={this.state.noteName} onChange={this.handleChange} />\r\n                        </div>\r\n                        < button type=\"submit\" className=\"btn btn-success \" >\r\n                            Add\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        );\r\n\r\n    }\r\n\r\n}\r\nexport default Form;","import React from 'react';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { GoCheck } from \"react-icons/go\";\r\nimport myNotes from './funcNote';\r\n\r\ninterface Iprops {\r\n    idTodo: number;\r\n    idNote: number;\r\n    changeComp(idTodo: number): void;\r\n}\r\n\r\nclass Todo extends React.Component<Iprops>{\r\n\r\n    render() {\r\n        const { idNote, idTodo } = this.props;\r\n        const todo = myNotes.notes[idNote].todos[idTodo];\r\n        return (\r\n            <div>\r\n                <div className=\"list-group\" >\r\n                    <div className=\r\n                        {(!todo.completed) ?\r\n                            \"list-group-item list-group-item-action list-group-item-info d-flex justify-content-between align-items-center\" :\r\n                            \"list-group-item list-group-item-action list-group-item-danger d-flex justify-content-between align-items-center\"\r\n                        }>\r\n                        <h6 > {todo.title}</h6>\r\n                        <div>\r\n                            <GoCheck color=\"Green\" onClick={() => this.props.changeComp(idTodo)} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Todo;","import React from 'react';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { GoTrashcan, GoListUnordered } from \"react-icons/go\";\r\nimport Todo from \"./todo\";\r\nimport myNotes from \"./funcNote\";\r\n\r\n\r\ninterface Iprops {\r\n    id: number;\r\n}\r\n\r\ninterface Istate {\r\n    todoName: string;\r\n    checked: boolean;\r\n    openList: boolean;\r\n}\r\n\r\n\r\nclass Notes extends React.Component<Iprops, Istate> {\r\n    constructor(props: Readonly<Iprops>) {\r\n        super(props);\r\n        this.state = {\r\n            todoName: \"\",\r\n            checked: false,\r\n            openList: false\r\n        }\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.changeComp = this.changeComp.bind(this);\r\n\r\n    }\r\n\r\n    handleChange(event: any) {\r\n        this.setState({\r\n            todoName: event.target.value\r\n        });\r\n    }\r\n\r\n    handleSubmit(event: any) {\r\n        event.preventDefault();\r\n        myNotes.addTodo(this.props.id, this.state.todoName);\r\n        this.setState({ todoName: \"\" })\r\n    }\r\n\r\n    changeComp(idTodo: number) {\r\n        myNotes.markComplete(this.props.id, idTodo);\r\n        this.setState({ checked: !this.state.checked })\r\n    }\r\n\r\n    Openlist(idNote: number) {\r\n        myNotes.OpenList(idNote);\r\n        this.setState({ openList: !this.state.openList })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"card bg-success text-white my-4 \" >\r\n                    <div className=\"card-body\" >\r\n                        <div className=\"d-flex justify-content-between\">\r\n                            <h6 className=\"card-title\">{myNotes.notes[this.props.id].noteName} </h6>\r\n                            < div className=\"row\" >\r\n                                < GoListUnordered\r\n                                    onClick={() => { this.Openlist(this.props.id) }} />\r\n                                <GoTrashcan color=\"red\"\r\n                                    onClick={(e) => { myNotes.deleteNote(myNotes.notes[this.props.id].id) }} />\r\n                            </div>\r\n                        </div>\r\n                        {(!myNotes.notes[this.props.id].openList) ?\r\n                            <div>\r\n                                <form className=\"form-group\" onSubmit={this.handleSubmit}>\r\n                                    <div className=\"row\" >\r\n                                        <div className=\"col\" >\r\n                                            <input type='text' placeholder=\"Name Todo\"\r\n                                                className=\"form-control\" value={this.state.todoName}\r\n                                                onChange={this.handleChange} />\r\n                                        </div>\r\n                                        < button type=\"submit\" className=\"btn btn-info \" > Add </button>\r\n                                    </div>\r\n                                </form>\r\n                                {myNotes.notes[this.props.id].todos.map((todo) => {\r\n                                    return (\r\n                                        <Todo\r\n                                            key={todo.todoId}\r\n                                            idTodo={todo.todoId}\r\n                                            idNote={this.props.id}\r\n                                            changeComp={this.changeComp} />);\r\n                                })\r\n                                }\r\n                            </div> : null\r\n                        }\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default Notes;","import React, { Component } from 'react';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Notes from \"./note\";\r\nimport myNotes from './funcNote';\r\nimport { observer } from \"mobx-react\";\r\n\r\ninterface Iprops {\r\n\r\n}\r\n\r\n\r\n@observer\r\nclass Todolist extends Component<Iprops> {\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"container-sm p-4 my-4  bg-dark text-white\" >\r\n                {myNotes.notes.map((note) => {\r\n                    return (\r\n                        <Notes key={note.id} id={myNotes.findNote(note.id)} />\r\n                    );\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Todolist;","import React, { Component } from 'react';\nimport Form from './comps/form';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Todolist from './comps/todolist';\nimport { observer } from \"mobx-react\";\n\n@observer\nclass App extends Component {\n\n  render() {\n\n    return (\n      <div className=\"App\" >\n        <Form />\n        <Todolist />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}